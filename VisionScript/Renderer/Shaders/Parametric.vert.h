
static const char * vert_Parametric =
"#version 330\n"

"layout (location = 0) in vec2 point;"
"layout (location = 1) in vec4 color;"
"layout (location = 2) in float thickness;"
"layout (location = 3) in vec2 pair;"

"uniform struct Camera {"
"	mat4 matrix;"
"	vec2 dimensions;"
"} camera;"

"out vec4 vertexColor;"
"out vec2 fragPosition;"
"out struct Segment {"
"	vec2 center;"
"	vec2 size;"
"	vec2 dir;"
"} segment;"

"void main() {"
"	vec2 aspect = vec2(camera.dimensions.y / camera.dimensions.x, 1.0);"
"	vec2 pos = (camera.matrix * vec4(point, 0.0, 1.0)).xy / aspect;"
"	vec2 pairPos = (camera.matrix * vec4(pair, 0.0, 1.0)).xy / aspect;"
"	vec2 forward = normalize(pos - pairPos);"
"	vec2 right = vec2(forward.y, -forward.x);"
"	float radius = (thickness / 2.0) / camera.dimensions.y;"
"	segment.center = (pos + pairPos) / 2.0;"
"	segment.size = vec2(radius, length(pos - pairPos) / 2.0);"
"	segment.dir = normalize(pos - pairPos);"
"	if (gl_VertexID % 6 == 0) { pos += (forward + right) * radius; }"
"	if (gl_VertexID % 6 == 1) { pos += (forward - right) * radius; }"
"	if (gl_VertexID % 6 == 2) { pos += (forward + right) * radius; segment.dir *= -1; }"
"	if (gl_VertexID % 6 == 3) { pos += (forward + right) * radius; segment.dir *= -1; }"
"	if (gl_VertexID % 6 == 4) { pos += (forward - right) * radius; segment.dir *= -1; }"
"	if (gl_VertexID % 6 == 5) { pos += (forward + right) * radius; }"
"	vertexColor = color;"
"	fragPosition = pos;"
"	gl_PointSize = thickness;"
"	gl_Position = vec4(pos * aspect, 0.0, 1.0);"
"}";
